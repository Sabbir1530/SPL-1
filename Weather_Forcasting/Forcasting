#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <time.h>
#include "Coefficient.h"

typedef struct
{
    char Date[20];
    char Season[10];
    float Temperature;
    float Humidity;
    float Wind_Speed;
    float Pressure;
    int Rain;
} WeatherData;

int loadData(const char *filename, WeatherData **data, int *dataCount)
{
    FILE *file = fopen("Processed_Dataset.csv", "r");
    if (!file)
    {
        printf("Error opening file\n");
        return -1;
    }

    char line[400];
    int count = 0;

    while (fgets(line, sizeof(line), file))
    {
        count++;
    }
    rewind(file);

    *dataCount = count - 1;
    *data = (WeatherData *)malloc(*dataCount * sizeof(WeatherData));

    int index = 0;
    while (fgets(line, sizeof(line), file))
    {
        if (index == 0)
        {
            index++;
            continue;
        }

        char *token = strtok(line, ",");
        strcpy((*data)[index - 1].Date, token);

        token = strtok(NULL, ",");
        strcpy((*data)[index - 1].Season, token);

        token = strtok(NULL, ",");
        (*data)[index - 1].Temperature = atof(token);

        token = strtok(NULL, ",");
        (*data)[index - 1].Humidity = atof(token);

        token = strtok(NULL, ",");
        (*data)[index - 1].Wind_Speed = atof(token);

        token = strtok(NULL, ",");
        (*data)[index - 1].Pressure = atof(token);

        token = strtok(NULL, ",");
        (*data)[index - 1].Rain = (strcmp(token, "rain\n") == 0) ? 1 : 0; // (1 for rain, 0 for no rain)

        index++;
    }
    fclose(file);
    return 0;
}

void normalizeFeatures(float *data, int size)
{
    float min = data[0], max = data[0];
    for (int i = 1; i < size; i++)
    {
        if (data[i] < min)
            min = data[i];
        if (data[i] > max)
            max = data[i];
    }

    for (int i = 0; i < size; i++)
    {
        data[i] = (data[i] - min) / (max - min); // Normalize between 0 and 1
    }
}

// logistic regression for rain prediction
float predictRain(float humidity, float wind_speed, float pressure, double *coefficients)
{

    float dotProduct = 0;

   dotProduct=coefficients[0] + 
           coefficients[1] * humidity + 
           coefficients[2] * wind_speed + 
           coefficients[3] * pressure; 

    float probability = 1 / (1 + exp(-dotProduct));
    return (probability > 0.7) ? 1 : 0;
}

// linear regression for temperature prediction
float predictTemperature(float humidity, float wind_speed, float pressure, double *coefficients)
{
    return coefficients[0] + 
           coefficients[1] * humidity + 
           coefficients[2] * wind_speed + 
           coefficients[3] * pressure; 
}

void splitDataset(WeatherData *data, int dataCount, WeatherData **trainSet, WeatherData **testSet, int *trainCount, int *testCount, float ratio)
{
    *trainCount = (int)(dataCount * ratio);
    *testCount = dataCount - *trainCount;

    *trainSet = (WeatherData *)malloc(*trainCount * sizeof(WeatherData));
    *testSet = (WeatherData *)malloc(*testCount * sizeof(WeatherData));

    for (int i = 0; i < *trainCount; i++)
    {
        (*trainSet)[i] = data[i];
    }

    for (int i = *trainCount; i < dataCount; i++)
    {
        (*testSet)[i - *trainCount] = data[i];
    }
}

// model accuracy
float evaluateModel(WeatherData *testSet, int testCount, double *coefficients)
{
    int correct = 0;
    int tempCorrect = 0;

    for (int i = 0; i < testCount; i++)
    {
        float hum = testSet[i].Humidity;
        float wind = testSet[i].Wind_Speed;
        float pres = testSet[i].Pressure;

        float rainPrediction = predictRain(hum, wind, pres, coefficients);
        float tempPrediction = predictTemperature(hum, wind, pres, coefficients);
        if ((int)rainPrediction == testSet[i].Rain)
        {
            correct++;
        }

        if (fabs(tempPrediction - testSet[i].Temperature) <10)
        {
            tempCorrect++;
        }
    }

    printf("Temparature Prediction Accuracy: %.2f%%\n", (float)tempCorrect / testCount * 100);
    return (float)correct / testCount;
}

// Find temperature and season for a given date
void previousData(const char *date, WeatherData *data, int dataCount)
{
    for (int i = 0; i < dataCount; i++)
    {
        if (strcmp(data[i].Date, date) == 0)
        {
            printf("Date: %s\n", data[i].Date);
            printf("Temperature: %.2f\n", data[i].Temperature);
            printf("Season: %s\n", data[i].Season);
            return;
        }
    }
    printf("Date not found in dataset.\n");
}

int main()
{
    WeatherData *data;
    int dataCount;

    if (loadData("Processed_Dataset.csv", &data, &dataCount) != 0)
    {
        return -1;
    }

    printf("Dataset loaded with %d records.\n", dataCount);

    // Split
    WeatherData *trainSet, *testSet;
    int trainCount, testCount;
    splitDataset(data, dataCount, &trainSet, &testSet, &trainCount, &testCount, 0.8);

    printf("Training data count: %d, Testing data count: %d\n", trainCount, testCount);

    double *coefficients;
    coefficients = finalCoefficientCalc();
    printf("\n");
       printf("\nCoefficients:\n");
    printf("Intercept: %f\n", coefficients[0]);
    printf("Humidity: %f\n", coefficients[1]);
    printf("Wind Speed: %f\n", coefficients[2]);
    printf("Pressure: %f\n", coefficients[3]);
    

    float accuracy = evaluateModel(testSet, testCount, coefficients);

    // Predict temperature for a given condition
    srand(time(NULL));
    float humidity = 50.0 + (rand() % 51);
    float wind_speed = 5.0 + (rand() % 11);   
    float pressure = 990.0 + (rand() % 61); 

    printf("\n");

    printf("Input Condition:\n");
    printf("Humidity: %.2f\n", humidity);
    printf("Wind Speed: %.2f\n", wind_speed);
    printf("Pressure: %.2f\n", pressure);  
    printf("\n");

    float rainPrediction = predictRain(humidity, wind_speed, pressure, coefficients);
    printf("Prediction: %s\n", rainPrediction == 0 ? "Rain" : "No Rain");

    float predictedTemp = predictTemperature(humidity, wind_speed, pressure, coefficients);
    printf("Predicted Temperature: %.2fÂ°C\n", predictedTemp);

    printf("\n");

    char inputDate[20];
    printf("Enter a date (MM/DD/YYYY): ");
    scanf("%19s", inputDate);
    previousData(inputDate, data, dataCount);

    free(data);
    free(trainSet);
    free(testSet);

    return 0;
}
